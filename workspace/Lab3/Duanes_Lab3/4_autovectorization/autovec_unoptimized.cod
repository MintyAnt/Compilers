; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	C:\Users\MintyAnt\Documents\Class\Summer 2013\CompilerDesign\Lab3\4_autovectorization\autovec.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG3702	DB	0aH, '[%d]=%f', 00H
CONST	ENDS
PUBLIC	_main
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41200000
EXTRN	_printf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
; Function compile flags: /Odtp
; File c:\users\mintyant\documents\class\summer 2013\compilerdesign\lab3\4_autovectorization\autovec.cpp
_TEXT	SEGMENT
_i$1 = -132						; size = 4
_i$2 = -128						; size = 4
_A$ = -124						; size = 40
_C$ = -84						; size = 40
_B$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_main	PROC

; 4    : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 5    : 	float A[10];
; 6    : 	float B[10] = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f };

  00013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0001b	f3 0f 11 45 d4	 movss	 DWORD PTR _B$[ebp], xmm0
  00020	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00028	f3 0f 11 45 d8	 movss	 DWORD PTR _B$[ebp+4], xmm0
  0002d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  00035	f3 0f 11 45 dc	 movss	 DWORD PTR _B$[ebp+8], xmm0
  0003a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  00042	f3 0f 11 45 e0	 movss	 DWORD PTR _B$[ebp+12], xmm0
  00047	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  0004f	f3 0f 11 45 e4	 movss	 DWORD PTR _B$[ebp+16], xmm0
  00054	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c00000
  0005c	f3 0f 11 45 e8	 movss	 DWORD PTR _B$[ebp+20], xmm0
  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40e00000
  00069	f3 0f 11 45 ec	 movss	 DWORD PTR _B$[ebp+24], xmm0
  0006e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  00076	f3 0f 11 45 f0	 movss	 DWORD PTR _B$[ebp+28], xmm0
  0007b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  00083	f3 0f 11 45 f4	 movss	 DWORD PTR _B$[ebp+32], xmm0
  00088	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00090	f3 0f 11 45 f8	 movss	 DWORD PTR _B$[ebp+36], xmm0

; 7    : 	float C[10] = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f };

  00095	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0009d	f3 0f 11 45 ac	 movss	 DWORD PTR _C$[ebp], xmm0
  000a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000aa	f3 0f 11 45 b0	 movss	 DWORD PTR _C$[ebp+4], xmm0
  000af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  000b7	f3 0f 11 45 b4	 movss	 DWORD PTR _C$[ebp+8], xmm0
  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  000c4	f3 0f 11 45 b8	 movss	 DWORD PTR _C$[ebp+12], xmm0
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  000d1	f3 0f 11 45 bc	 movss	 DWORD PTR _C$[ebp+16], xmm0
  000d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40c00000
  000de	f3 0f 11 45 c0	 movss	 DWORD PTR _C$[ebp+20], xmm0
  000e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40e00000
  000eb	f3 0f 11 45 c4	 movss	 DWORD PTR _C$[ebp+24], xmm0
  000f0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  000f8	f3 0f 11 45 c8	 movss	 DWORD PTR _C$[ebp+28], xmm0
  000fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41100000
  00105	f3 0f 11 45 cc	 movss	 DWORD PTR _C$[ebp+32], xmm0
  0010a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00112	f3 0f 11 45 d0	 movss	 DWORD PTR _C$[ebp+36], xmm0

; 8    : 	#pragma loop(hint_parallel(4))
; 9    : 	for (int i=0; i<10; ++i)

  00117	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0011e	eb 09		 jmp	 SHORT $LN6@main
$LN5@main:
  00120	8b 45 80	 mov	 eax, DWORD PTR _i$2[ebp]
  00123	83 c0 01	 add	 eax, 1
  00126	89 45 80	 mov	 DWORD PTR _i$2[ebp], eax
$LN6@main:
  00129	83 7d 80 0a	 cmp	 DWORD PTR _i$2[ebp], 10	; 0000000aH
  0012d	7d 1d		 jge	 SHORT $LN4@main

; 10   : 	{
; 11   : 		A[i] = B[i] * C[i];

  0012f	8b 4d 80	 mov	 ecx, DWORD PTR _i$2[ebp]
  00132	8b 55 80	 mov	 edx, DWORD PTR _i$2[ebp]
  00135	f3 0f 10 44 8d
	d4		 movss	 xmm0, DWORD PTR _B$[ebp+ecx*4]
  0013b	f3 0f 59 44 95
	ac		 mulss	 xmm0, DWORD PTR _C$[ebp+edx*4]
  00141	8b 45 80	 mov	 eax, DWORD PTR _i$2[ebp]
  00144	f3 0f 11 44 85
	84		 movss	 DWORD PTR _A$[ebp+eax*4], xmm0

; 12   : 	}

  0014a	eb d4		 jmp	 SHORT $LN5@main
$LN4@main:

; 13   : 
; 14   : 	#pragma loop(hint_parallel(4))
; 15   : 	for (int i=0; i<10; ++i)

  0014c	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1[ebp], 0
  00156	eb 0f		 jmp	 SHORT $LN3@main
$LN2@main:
  00158	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _i$1[ebp]
  0015e	83 c1 01	 add	 ecx, 1
  00161	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _i$1[ebp], ecx
$LN3@main:
  00167	83 bd 7c ff ff
	ff 0a		 cmp	 DWORD PTR _i$1[ebp], 10	; 0000000aH
  0016e	7d 2a		 jge	 SHORT $LN1@main

; 16   : 	{
; 17   : 		printf("\n[%d]=%f", i, A[i]);

  00170	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _i$1[ebp]
  00176	f3 0f 5a 44 95
	84		 cvtss2sd xmm0, DWORD PTR _A$[ebp+edx*4]
  0017c	83 ec 08	 sub	 esp, 8
  0017f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00184	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _i$1[ebp]
  0018a	50		 push	 eax
  0018b	68 00 00 00 00	 push	 OFFSET $SG3702
  00190	e8 00 00 00 00	 call	 _printf
  00195	83 c4 10	 add	 esp, 16			; 00000010H

; 18   : 	}

  00198	eb be		 jmp	 SHORT $LN2@main
$LN1@main:

; 19   : 
; 20   : 	return 0;

  0019a	33 c0		 xor	 eax, eax

; 21   : }

  0019c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0019f	33 cd		 xor	 ecx, ebp
  001a1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
END
