; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.60610.1 

	TITLE	C:\Users\MintyAnt\Documents\Class\Summer 2013\CompilerDesign\Lab3\4_autovectorization\autovec.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_main
PUBLIC	??_C@_08EFJHLGAE@?6?$FL?$CFd?$FN?$DN?$CFf?$AA@	; `string'
EXTRN	_printf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_C2VectParallel:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_08EFJHLGAE@?6?$FL?$CFd?$FN?$DN?$CFf?$AA@
CONST	SEGMENT
??_C@_08EFJHLGAE@?6?$FL?$CFd?$FN?$DN?$CFf?$AA@ DB 0aH, '[%d]=%f', 00H ; `string'
CONST	ENDS
; Function compile flags: /Ogtpy
; File c:\users\mintyant\documents\class\summer 2013\compilerdesign\lab3\4_autovectorization\autovec.cpp
;	COMDAT _main$par$1@NN
_TEXT	SEGMENT
tv1032 = -8						; size = 4
tv1056 = -4						; size = 4
tv1038 = 8						; size = 4
$T1 = 8							; size = 4
$T2 = 12						; size = 4
_A$ = 16						; size = 4
tv1036 = 20						; size = 4
_C$ = 20						; size = 4
_B$ = 24						; size = 4
_main$par$1@NN PROC					; COMDAT

; 9    : 	for (int i=0; i<10; ++i)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR $T1[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR $T2[esp-4]
  00008	83 ec 08	 sub	 esp, 8
  0000b	3b d1		 cmp	 edx, ecx
  0000d	0f 8d e6 00 00
	00		 jge	 $LN3@main$par$1
  00013	55		 push	 ebp
  00014	8b 6c 24 20	 mov	 ebp, DWORD PTR _B$[esp+8]
  00018	8b c1		 mov	 eax, ecx
  0001a	56		 push	 esi
  0001b	8b 74 24 20	 mov	 esi, DWORD PTR _C$[esp+12]
  0001f	2b c2		 sub	 eax, edx
  00021	57		 push	 edi
  00022	8b 7c 24 20	 mov	 edi, DWORD PTR _A$[esp+16]
  00026	83 f8 04	 cmp	 eax, 4
  00029	0f 8c 9f 00 00
	00		 jl	 $LC4@main$par$1
  0002f	8d 41 fd	 lea	 eax, DWORD PTR [ecx-3]
  00032	8b ce		 mov	 ecx, esi
  00034	2b cd		 sub	 ecx, ebp
  00036	89 4c 24 18	 mov	 DWORD PTR tv1038[esp+16], ecx
  0003a	8b cf		 mov	 ecx, edi
  0003c	2b cd		 sub	 ecx, ebp
  0003e	89 44 24 10	 mov	 DWORD PTR tv1056[esp+20], eax
  00042	89 4c 24 24	 mov	 DWORD PTR tv1036[esp+16], ecx
  00046	53		 push	 ebx
  00047	8d 04 95 04 00
	00 00		 lea	 eax, DWORD PTR [edx*4+4]
  0004e	8d 5a 02	 lea	 ebx, DWORD PTR [edx+2]
  00051	03 c5		 add	 eax, ebp
  00053	8b 6c 24 28	 mov	 ebp, DWORD PTR tv1036[esp+20]
  00057	8b ce		 mov	 ecx, esi
  00059	2b cf		 sub	 ecx, edi
  0005b	8d 1c 9f	 lea	 ebx, DWORD PTR [edi+ebx*4]
  0005e	8b 7c 24 1c	 mov	 edi, DWORD PTR tv1038[esp+20]
  00062	89 4c 24 10	 mov	 DWORD PTR tv1032[esp+24], ecx
  00066	eb 08 8d a4 24
	00 00 00 00 90	 npad	 10
$LL5@main$par$1:

; 10   : 	{
; 11   : 		A[i] = B[i] * C[i];

  00070	f3 0f 10 04 96	 movss	 xmm0, DWORD PTR [esi+edx*4]
  00075	f3 0f 59 40 fc	 mulss	 xmm0, DWORD PTR [eax-4]
  0007a	8b 4c 24 10	 mov	 ecx, DWORD PTR tv1032[esp+24]
  0007e	83 c2 04	 add	 edx, 4
  00081	f3 0f 11 43 f8	 movss	 DWORD PTR [ebx-8], xmm0
  00086	f3 0f 10 04 07	 movss	 xmm0, DWORD PTR [edi+eax]
  0008b	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  0008f	8d 40 10	 lea	 eax, DWORD PTR [eax+16]
  00092	8d 5b 10	 lea	 ebx, DWORD PTR [ebx+16]
  00095	f3 0f 11 44 28
	f0		 movss	 DWORD PTR [eax+ebp-16], xmm0
  0009b	f3 0f 10 44 19
	f0		 movss	 xmm0, DWORD PTR [ecx+ebx-16]
  000a1	f3 0f 59 40 f4	 mulss	 xmm0, DWORD PTR [eax-12]
  000a6	8b 4c 24 20	 mov	 ecx, DWORD PTR $T2[esp+20]
  000aa	f3 0f 11 43 f0	 movss	 DWORD PTR [ebx-16], xmm0
  000af	f3 0f 10 44 96
	fc		 movss	 xmm0, DWORD PTR [esi+edx*4-4]
  000b5	f3 0f 59 40 f8	 mulss	 xmm0, DWORD PTR [eax-8]
  000ba	f3 0f 11 43 f4	 movss	 DWORD PTR [ebx-12], xmm0
  000bf	3b 54 24 14	 cmp	 edx, DWORD PTR tv1056[esp+24]
  000c3	7c ab		 jl	 SHORT $LL5@main$par$1
  000c5	8b 7c 24 24	 mov	 edi, DWORD PTR _A$[esp+20]
  000c9	8b 6c 24 2c	 mov	 ebp, DWORD PTR _B$[esp+20]
  000cd	5b		 pop	 ebx
$LC4@main$par$1:

; 9    : 	for (int i=0; i<10; ++i)

  000ce	3b d1		 cmp	 edx, ecx
  000d0	7d 24		 jge	 SHORT $LN6@main$par$1
  000d2	8d 04 95 00 00
	00 00		 lea	 eax, DWORD PTR [edx*4]
  000d9	03 c5		 add	 eax, ebp
  000db	2b f5		 sub	 esi, ebp
  000dd	2b fd		 sub	 edi, ebp
  000df	2b ca		 sub	 ecx, edx
$LC13@main$par$1:

; 10   : 	{
; 11   : 		A[i] = B[i] * C[i];

  000e1	f3 0f 10 04 30	 movss	 xmm0, DWORD PTR [eax+esi]
  000e6	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  000ea	8d 40 04	 lea	 eax, DWORD PTR [eax+4]
  000ed	f3 0f 11 44 38
	fc		 movss	 DWORD PTR [eax+edi-4], xmm0
  000f3	49		 dec	 ecx
  000f4	75 eb		 jne	 SHORT $LC13@main$par$1
$LN6@main$par$1:
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5d		 pop	 ebp
$LN3@main$par$1:

; 9    : 	for (int i=0; i<10; ++i)

  000f9	83 c4 08	 add	 esp, 8
  000fc	c2 14 00	 ret	 20			; 00000014H
_main$par$1@NN ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\users\mintyant\documents\class\summer 2013\compilerdesign\lab3\4_autovectorization\autovec.cpp
;	COMDAT _main
_TEXT	SEGMENT
_C$ = -124						; size = 40
_B$ = -84						; size = 40
_A$ = -44						; size = 40
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 4    : {	

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 c0	 and	 esp, -64		; ffffffc0H
  00006	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 78	 mov	 DWORD PTR __$ArrayPad$[esp+124], eax
  00014	56		 push	 esi

; 5    : 	float A[10];
; 6    : 	float B[10] = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f };
; 7    : 	float C[10] = {1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f };
; 8    : 	#pragma loop(hint_parallel(4))
; 9    : 	for (int i=0; i<10; ++i)

  00015	8d 44 24 2c	 lea	 eax, DWORD PTR _B$[esp+128]
  00019	50		 push	 eax
  0001a	8d 44 24 08	 lea	 eax, DWORD PTR _C$[esp+132]
  0001e	50		 push	 eax
  0001f	8d 44 24 5c	 lea	 eax, DWORD PTR _A$[esp+136]
  00023	50		 push	 eax
  00024	6a 05		 push	 5
  00026	68 00 00 00 00	 push	 OFFSET _main$par$1@NN
  0002b	6a 00		 push	 0
  0002d	6a 04		 push	 4
  0002f	6a 00		 push	 0
  00031	6a 01		 push	 1
  00033	6a 0a		 push	 10			; 0000000aH
  00035	6a 00		 push	 0
  00037	c7 44 24 58 00
	00 80 3f	 mov	 DWORD PTR _B$[esp+172], 1065353216 ; 3f800000H
  0003f	c7 44 24 5c 00
	00 00 40	 mov	 DWORD PTR _B$[esp+176], 1073741824 ; 40000000H
  00047	c7 44 24 60 00
	00 40 40	 mov	 DWORD PTR _B$[esp+180], 1077936128 ; 40400000H
  0004f	c7 44 24 64 00
	00 80 40	 mov	 DWORD PTR _B$[esp+184], 1082130432 ; 40800000H
  00057	c7 44 24 68 00
	00 a0 40	 mov	 DWORD PTR _B$[esp+188], 1084227584 ; 40a00000H
  0005f	c7 44 24 6c 00
	00 c0 40	 mov	 DWORD PTR _B$[esp+192], 1086324736 ; 40c00000H
  00067	c7 44 24 70 00
	00 e0 40	 mov	 DWORD PTR _B$[esp+196], 1088421888 ; 40e00000H
  0006f	c7 44 24 74 00
	00 00 41	 mov	 DWORD PTR _B$[esp+200], 1090519040 ; 41000000H
  00077	c7 44 24 78 00
	00 10 41	 mov	 DWORD PTR _B$[esp+204], 1091567616 ; 41100000H
  0007f	c7 44 24 7c 00
	00 20 41	 mov	 DWORD PTR _B$[esp+208], 1092616192 ; 41200000H
  00087	c7 44 24 30 00
	00 80 3f	 mov	 DWORD PTR _C$[esp+172], 1065353216 ; 3f800000H
  0008f	c7 44 24 34 00
	00 00 40	 mov	 DWORD PTR _C$[esp+176], 1073741824 ; 40000000H
  00097	c7 44 24 38 00
	00 40 40	 mov	 DWORD PTR _C$[esp+180], 1077936128 ; 40400000H
  0009f	c7 44 24 3c 00
	00 80 40	 mov	 DWORD PTR _C$[esp+184], 1082130432 ; 40800000H
  000a7	c7 44 24 40 00
	00 a0 40	 mov	 DWORD PTR _C$[esp+188], 1084227584 ; 40a00000H
  000af	c7 44 24 44 00
	00 c0 40	 mov	 DWORD PTR _C$[esp+192], 1086324736 ; 40c00000H
  000b7	c7 44 24 48 00
	00 e0 40	 mov	 DWORD PTR _C$[esp+196], 1088421888 ; 40e00000H
  000bf	c7 44 24 4c 00
	00 00 41	 mov	 DWORD PTR _C$[esp+200], 1090519040 ; 41000000H
  000c7	c7 44 24 50 00
	00 10 41	 mov	 DWORD PTR _C$[esp+204], 1091567616 ; 41100000H
  000cf	c7 44 24 54 00
	00 20 41	 mov	 DWORD PTR _C$[esp+208], 1092616192 ; 41200000H
  000d7	e8 00 00 00 00	 call	 _C2VectParallel
  000dc	83 c4 2c	 add	 esp, 44			; 0000002cH

; 10   : 	{
; 11   : 		A[i] = B[i] * C[i];
; 12   : 	}
; 13   : 
; 14   : 	#pragma loop(hint_parallel(4))
; 15   : 	for (int i=0; i<10; ++i)

  000df	33 f6		 xor	 esi, esi
$LL15@main:

; 16   : 	{
; 17   : 		printf("\n[%d]=%f", i, A[i]);

  000e1	f3 0f 10 44 b4
	54		 movss	 xmm0, DWORD PTR _A$[esp+esi*4+128]
  000e7	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ea	83 ec 08	 sub	 esp, 8
  000ed	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000f2	56		 push	 esi
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_08EFJHLGAE@?6?$FL?$CFd?$FN?$DN?$CFf?$AA@
  000f8	e8 00 00 00 00	 call	 _printf
  000fd	46		 inc	 esi
  000fe	83 c4 10	 add	 esp, 16			; 00000010H
  00101	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00104	7c db		 jl	 SHORT $LL15@main

; 18   : 	}
; 19   : 
; 20   : 	return 0;
; 21   : }

  00106	8b 4c 24 7c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+128]
  0010a	5e		 pop	 esi
  0010b	33 cc		 xor	 ecx, esp
  0010d	33 c0		 xor	 eax, eax
  0010f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
END
